#!/usr/bin/env python3
"""
Telegram –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–∂–∏–º–∞–Ω–∏–π.
"""
import asyncio
import logging
import os
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command

from src.infrastructure.database import DatabaseAdapter
from src.application.use_cases import UserUseCase, TaskUseCase, StatsUseCase, AchievementUseCase
from src.presentation.handlers import MessageHandlers

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN_BOT = os.getenv('TOKEN_BOT')
if not TOKEN_BOT:
    raise ValueError("TOKEN_BOT –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    filename='bot_pushups.log',
    filemode='a',
    encoding='utf-8',
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
)


class BotApplication:
    """–û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞ —Å —á–∏—Å—Ç–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π."""
    
    def __init__(self):
        # –°–ª–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        self.db = DatabaseAdapter()
        
        # –°–ª–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.user_use_case = UserUseCase(self.db)
        self.task_use_case = TaskUseCase(self.db)
        self.stats_use_case = StatsUseCase(self.db)
        self.achievement_use_case = AchievementUseCase(self.db)
        
        # –°–ª–æ–π –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
        self.handlers = MessageHandlers(
            self.user_use_case,
            self.task_use_case,
            self.stats_use_case,
            self.achievement_use_case
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
        if not TOKEN_BOT:
            raise ValueError("TOKEN_BOT –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
        self.bot = Bot(token=TOKEN_BOT)
        self.dp = Dispatcher()
        self._setup_handlers()
    
    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π."""
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        self.dp.message.register(self.handlers.start_handler, Command("start"))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
        self.dp.message.register(self.handlers.new_task_handler, F.text == "üèãÔ∏è‚Äç‚ôÇÔ∏è –ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ")
        self.dp.message.register(self.handlers.stats_handler, F.text == "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        self.dp.message.register(self.handlers.help_handler, F.text == "‚ùì –ü–æ–º–æ—â—å")
        self.dp.message.register(self.handlers.settings_handler, F.text == "üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
        self.dp.callback_query.register(self.handlers.done_callback_handler, F.data.startswith("done_"))
        self.dp.callback_query.register(self.handlers.custom_count_callback_handler, F.data == "custom_count")
        self.dp.callback_query.register(self.handlers.skip_callback_handler, F.data == "skip")
        self.dp.callback_query.register(self.handlers.set_level_callback_handler, F.data.startswith("set_level_"))
        self.dp.callback_query.register(self.handlers.back_to_main_callback_handler, F.data == "back_to_main")
        self.dp.callback_query.register(self.handlers.detailed_stats_callback_handler, F.data == "detailed_stats")  # type: ignore
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ (–ª–æ–≤–∏—Ç –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ)
        self.dp.message.register(self.handlers.text_handler)
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
        logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å —á–∏—Å—Ç–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π...")
        try:
            await self.dp.start_polling(self.bot)
        except Exception as error:
            logging.error(f'–û—à–∏–±–∫–∞ –±–æ—Ç–∞: {error}')
            raise


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    app = BotApplication()
    await app.start()


if __name__ == '__main__':
    asyncio.run(main()) 