"""
Domain services - business logic.
"""
from random import randint
from datetime import date
from typing import Optional

from src.domain.entities import User, Task


class TaskService:
    """Service for task generation and management."""
    
    @staticmethod
    def generate_task(user: User) -> Task:
        """Generate a new task for user based on their level."""
        pushups_count = TaskService._random_pushups(user.level)
        
        return Task(
            user_id=user.id,
            pushups_count=pushups_count,
            level=user.level,
            date=date.today()
        )
    
    @staticmethod
    def _random_pushups(level: int) -> int:
        """Generate random pushups count based on level."""
        levels = {
            1: (5, 15),    # –ù–∞—á–∏–Ω–∞—é—â–∏–π
            2: (10, 25),   # –ù–æ–≤–∏—á–æ–∫
            3: (15, 35),   # –°—Ä–µ–¥–Ω–∏–π
            4: (20, 45),   # –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π
            5: (25, 60),   # –≠–∫—Å–ø–µ—Ä—Ç
            6: (30, 80)    # –ú–∞—Å—Ç–µ—Ä
        }
        
        if level not in levels:
            level = 1
        
        min_pushups, max_pushups = levels[level]
        return randint(min_pushups, max_pushups)


class UserService:
    """Service for user management."""
    
    @staticmethod
    def get_user_level_name(level: int) -> str:
        """Get user level name."""
        levels = {
            1: "–ù–∞—á–∏–Ω–∞—é—â–∏–π",
            2: "–ù–æ–≤–∏—á–æ–∫", 
            3: "–°—Ä–µ–¥–Ω–∏–π",
            4: "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π",
            5: "–≠–∫—Å–ø–µ—Ä—Ç",
            6: "–ú–∞—Å—Ç–µ—Ä"
        }
        return levels.get(level, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
    
    @staticmethod
    def is_valid_level(level: int) -> bool:
        """Check if level is valid."""
        return 1 <= level <= 6


class AchievementService:
    """Service for achievements and rewards."""
    
    @staticmethod
    def get_achievement_message(days_count: int) -> Optional[str]:
        """Get achievement message for days count."""
        rewards = {
            7: "üéâ –ù–µ–¥–µ–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫! –¢—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏!",
            14: "üèÜ –î–≤–µ –Ω–µ–¥–µ–ª–∏! –¢—ã —Ñ–æ—Ä–º–∏—Ä—É–µ—à—å –ø—Ä–∏–≤—ã—á–∫—É!",
            30: "üëë –ú–µ—Å—è—Ü —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫! –¢—ã –Ω–∞—Å—Ç–æ—è—â–∏–π —á–µ–º–ø–∏–æ–Ω!",
            50: "üíé 50 –¥–Ω–µ–π! –¢—ã –∂–µ–ª–µ–∑–Ω—ã–π —á–µ–ª–æ–≤–µ–∫!",
            100: "üåü 100 –¥–Ω–µ–π! –¢—ã –ª–µ–≥–µ–Ω–¥–∞!"
        }
        
        return rewards.get(days_count)
    
    @staticmethod
    def get_motivational_message() -> str:
        """Get random motivational message."""
        messages = [
            "üí™ –¢—ã —Å—Ç–∞–Ω–æ–≤–∏—à—å—Å—è —Å–∏–ª—å–Ω–µ–µ —Å –∫–∞–∂–¥—ã–º –¥–Ω–µ–º!",
            "üî• –¢–≤–æ—è —Å–∏–ª–∞ –≤ —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç–∏!",
            "üèÜ –ö–∞–∂–¥—ã–π –æ—Ç–∂–∏–º–∞–Ω–∏–µ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç —Ç–µ–±—è –∫ —Ü–µ–ª–∏!",
            "‚≠ê –¢—ã –¥–µ–ª–∞–µ—à—å —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!",
            "üöÄ –¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –≤–ø–µ—á–∞—Ç–ª—è–µ—Ç!",
            "üíé –¢—ã –Ω–∞—Å—Ç–æ—è—â–∏–π –±–æ–µ—Ü!",
            "üåü –¢–≤–æ—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –¥–æ—Å—Ç–æ–π–Ω–∞ —É–≤–∞–∂–µ–Ω–∏—è!",
            "‚ö° –¢—ã –∑–∞—Ä—è–∂–∞–µ—à—å —ç–Ω–µ—Ä–≥–∏–µ–π –≤—Å–µ—Ö –≤–æ–∫—Ä—É–≥!"
        ]
        
        return messages[randint(0, len(messages) - 1)] 